import os
import asyncio
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from telethon.errors import (
    PhoneNumberInvalidError, PhoneCodeInvalidError, SessionPasswordNeededError
)
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
API_ID = int(os.environ.get("API_ID"))
API_HASH = os.environ.get("API_HASH")
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}
user_keywords = {}


# === /connect ===
async def connect(update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: +79991234567)")
    context.user_data["awaiting_phone"] = True


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    # 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if context.user_data.get("awaiting_phone"):
        phone = text
        try:
            session = StringSession()
            client = TelegramClient(session, API_ID, API_HASH)
            await client.connect()
            await client.send_code_request(phone)

            user_sessions[user_id] = {"client": client, "session": session, "phone": phone}
            context.user_data["awaiting_phone"] = False
            context.user_data["awaiting_code"] = True

            await update.message.reply_text("–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram:")
        except PhoneNumberInvalidError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    # 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–¥
    if context.user_data.get("awaiting_code"):
        code = text
        data = user_sessions.get(user_id)
        if not data:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect")
            return

        client = data["client"]
        phone = data["phone"]

        try:
            await client.sign_in(phone=phone, code=code)
            context.user_data["awaiting_code"] = False
            await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
            context.user_data["awaiting_keywords"] = True
        except PhoneCodeInvalidError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.")
        except SessionPasswordNeededError:
            await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –≤–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –í—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return

    # 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if context.user_data.get("awaiting_keywords"):
        keywords = [k.strip().lower() for k in text.split(",") if k.strip()]
        user_keywords[user_id] = keywords
        context.user_data["awaiting_keywords"] = False

        await update.message.reply_text(f"üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(keywords)}\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.")
        asyncio.create_task(start_monitoring(user_id))
        return


# === –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def start_monitoring(user_id: int):
    data = user_sessions[user_id]
    client = data["client"]
    keywords = user_keywords.get(user_id, [])

    @client.on(events.NewMessage(incoming=True))
    async def handler(event):
        try:
            text = (event.message.message or "").lower()
            if any(k in text for k in keywords):
                chat = await event.get_chat()
                title = getattr(chat, "title", None) or getattr(chat, "username", None)
                await client.send_message(
                    "me",
                    f"üõ∞ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!\n–ß–∞—Ç: {title}\n\n{text[:1000]}"
                )
        except Exception:
            pass

    await client.run_until_disconnected()


# === –ó–∞–ø—É—Å–∫ ===
async def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("connect", connect))
    app.add_handler(CommandHandler("start", connect))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await app.run_polling()


if __name__ == "__main__":
    asyncio.run(main())